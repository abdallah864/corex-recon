#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# =============================================================================
# Copyright (c) 2025 Abdallah (corex2025)
# This script is licensed under the MIT License. See LICENSE file for details.
# =============================================================================

echo "========================================"
echo "    CoreExploit: Exploitation Phase     "
echo "========================================"

EXPLOIT_LOG="exploit_log.txt"
EXPLOIT_ERR="exploit_error_log.txt"
: > "$EXPLOIT_LOG"
: > "$EXPLOIT_ERR"

# ---- Tool Check ----
REQUIRED_TOOLS=(dalfox ffuf curl nmap)
TOOL_MISSING=0
for tool in "${REQUIRED_TOOLS[@]}"; do
  if ! command -v "$tool" &>/dev/null; then
    echo "[!] $tool is not installed. Please run install.sh first." | tee -a "$EXPLOIT_LOG"
    TOOL_MISSING=1
  fi
done
if [ "$TOOL_MISSING" -eq 1 ]; then
  echo "[✗] One or more tools are missing. Exiting." | tee -a "$EXPLOIT_LOG"
  exit 1
fi

# ---- Select latest folder from coreleak_* ----
FOLDER=$(ls -dt coreleak_* 2>/dev/null | head -n 1)
if [ ! -d "$FOLDER" ]; then
  echo "[!] No coreleak_* folder found. Run passive script first." | tee -a "$EXPLOIT_LOG"
  exit 1
fi

DOMAIN=$(echo "$FOLDER" | cut -d'_' -f2)
EXPLOIT="$FOLDER/exploit"
MERGED="$EXPLOIT/merged"
mkdir -p "$EXPLOIT" "$MERGED"

# ---- Flags ----
RUN_ALL=true
RUN_DALFOX=false
RUN_FFUF=false
RUN_CASE=false
RUN_NMAP=false

for arg in "$@"; do
  case $arg in
    --dalfox-only) RUN_ALL=false; RUN_DALFOX=true ;;
    --ffuf-only)   RUN_ALL=false; RUN_FFUF=true  ;;
    --case-only)   RUN_ALL=false; RUN_CASE=true  ;;
    --nmap-only)   RUN_ALL=false; RUN_NMAP=true ;;
  esac
done

echo "[*] Using data from: $FOLDER" | tee -a "$EXPLOIT_LOG"
echo "[*] Output will be saved in: $EXPLOIT" | tee -a "$EXPLOIT_LOG"

# ---- Merge inputs ----
if $RUN_ALL || $RUN_DALFOX || $RUN_FFUF; then
  echo "[*] Merging possible injection points ..." | tee -a "$EXPLOIT_LOG"
  cat "$FOLDER"/active/gf_*_hits.txt "$FOLDER/arjun_params.txt" "$FOLDER/arjun_params_paramspider.txt" 2>/dev/null \
    | sort -u > "$MERGED/all_params_raw.txt"

  echo "[*] Filtering noise and non-exploitable entries ..." | tee -a "$EXPLOIT_LOG"
  cat "$MERGED/all_params_raw.txt" \
    | grep '=' \
    | grep -vE 'utm_|ref=|.css|.png|.jpg|.svg|.woff' \
    | sort -u > "$MERGED/cleaned_params.txt"

  cp "$MERGED/cleaned_params.txt" "$EXPLOIT/manual_injection.txt"
else
  echo "[*] Skipping merge step (not required for selected flags)" | tee -a "$EXPLOIT_LOG"
fi

# ---- Run Dalfox ----
if $RUN_ALL || $RUN_DALFOX; then
  echo "[*] Running Dalfox (XSS Scanner) ..." | tee -a "$EXPLOIT_LOG"
  if [ -s "$MERGED/cleaned_params.txt" ]; then
    if ! dalfox file "$MERGED/cleaned_params.txt" --skip-bav -o "$EXPLOIT/dalfox_result.txt" 2>>"$EXPLOIT_ERR"; then
      echo "[!] Dalfox failed." | tee -a "$EXPLOIT_LOG"
    fi
  else
    echo "[!] No cleaned params for Dalfox. Skipping." | tee -a "$EXPLOIT_LOG"
  fi
fi

# ---- Run FFUF ----
if $RUN_ALL || $RUN_FFUF; then
  echo "[*] Running FFUF (Directory Bruteforce) ..." | tee -a "$EXPLOIT_LOG"
  if [ -f "$FOLDER/active/live_urls.txt" ]; then
    read -rp "[?] Use custom wordlist? (y/n): " customlist
    if [[ $customlist == "y" ]]; then
      read -rp "[+] Enter full path to wordlist: " WORDLIST
    else
      WORDLIST="/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt"
    fi

    while read -r url; do
      if ! ffuf -u "$url/FUZZ" -w "$WORDLIST" -of csv \
        -o "$EXPLOIT/ffuf_$(echo "$url" | tr '/' '_').csv" 2>>"$EXPLOIT_ERR"; then
        echo "[!] FFUF failed for $url" | tee -a "$EXPLOIT_LOG"
      fi
    done < "$FOLDER/active/live_urls.txt"
  else
    echo "[!] live_urls.txt not found. Skipping FFUF." | tee -a "$EXPLOIT_LOG"
  fi
fi

# ---- Case-sensitive endpoint scan ----
if $RUN_ALL || $RUN_CASE; then
  read -rp "Run case-sensitive endpoint scan? (y/n): " runcase
  if [[ $runcase == "y" ]]; then
    echo "[*] Scanning for case-sensitive endpoints ..." | tee -a "$EXPLOIT_LOG"
    ENDPOINTS=(
      "/metrics" "/debug" "/admin" "/status" "/health"
      "/actuator" "/console" "/logs" "/internals" "/config"
      "/env" "/monitor" "/server-status" "/server-info" "/version"
      "/api" "/auth" "/portal" "/stats" "/dashboard"
    )
    CASESCAN="$EXPLOIT/case_scan"
    mkdir -p "$CASESCAN"
    for path in "${ENDPOINTS[@]}"; do
      UPPER=$(echo "$path" | tr '[:lower:]' '[:upper:]')
      echo "[*] Testing: $UPPER" | tee -a "$EXPLOIT_LOG"
      RESPONSE=$(curl -s -i -X GET "https://$DOMAIN$UPPER" -H "X-Original-URL: $path")
      STATUS=$(echo "$RESPONSE" | grep -Eo 'HTTP/[0-9\\.]+ [0-9]+' | awk '{print $2}')
      LOCATION=$(echo "$RESPONSE" | grep -i '^location:' | head -n 1)
      if [[ "$STATUS" =~ ^(200|301|302|403)$ ]]; then
        echo "[$STATUS] $UPPER $LOCATION" | tee -a "$CASESCAN/results_filtered.txt"
      fi
    done
    echo "[*] Case-sensitive scan done. Results in: $CASESCAN/results_filtered.txt" | tee -a "$EXPLOIT_LOG"
  else
    echo "[*] Case-sensitive endpoint scan skipped." | tee -a "$EXPLOIT_LOG"
  fi
fi

# ---- Run Nmap ----
if $RUN_ALL || $RUN_NMAP; then
  read -rp "Run Nmap scan on domain? (y/n): " runnmap
  if [[ $runnmap == "y" ]]; then
    echo "[*] Running Nmap (port & vuln scan) on $DOMAIN ..." | tee -a "$EXPLOIT_LOG"
    if ! nmap -sS -sV --script vuln "$DOMAIN" -oN "$EXPLOIT/nmap_vuln_scan.txt" 2>>"$EXPLOIT_ERR"; then
      echo "[!] Nmap failed." | tee -a "$EXPLOIT_LOG"
    fi
    echo "[*] Nmap results saved in: $EXPLOIT/nmap_vuln_scan.txt" | tee -a "$EXPLOIT_LOG"
  else
    echo "[*] Nmap scan skipped." | tee -a "$EXPLOIT_LOG"
  fi
fi

echo "========================================" | tee -a "$EXPLOIT_LOG"
echo "[✓] Exploitation Finished." | tee -a "$EXPLOIT_LOG"
echo "[✓] All output saved in: $EXPLOIT/  (Log: $EXPLOIT_LOG, Errors: $EXPLOIT_ERR)"

